from psychopy import visual, core, event
from stereo_tones_helper import genLRtone
import pygame
import numpy as np

# Initialize window
sy = 1000
sx = 1200
win = visual.Window(size = (sx,sy),units='pix',color='black')

#Stimuli
#Fixation cross
cross = visual.TextStim(win,text='+',color='white',height=40)

#Source circles
lcircle = visual.Circle(win,radius=sy*.05,color='red',pos=(-sx*.20,0))
rcircle = visual.Circle(win,radius=sy*.05,color='blue',pos=(sx*.20,0))

#Tone visuals
tone = visual.ImageStim(win,image="whitenote.png",size=(sy*.05,sy*.05))

#Choice circle
c1circle = visual.Circle(win,radius=sy*.07,color='white')
c2circle = visual.Circle(win,radius=sy*.05,color='grey')

#Make tones
duration = .5          # duration of tone in seconds
sample_rate = 22500    #sampling rate
freq = 1000            #tone frequency (in Hz)
bits = -16             #bits

## GENERATE TONES ##
# Uses function from 'genLRtones' to generate tones on the left and right
buf_right,buf_left = genLRtone(sample_rate,bits,freq,duration)        #Generate arrays for tones
pygame.mixer.init(frequency = sample_rate, size = bits, channels = 2) #Initialize pygame mixer
soundLeft = pygame.sndarray.make_sound(buf_left)                      #Initialize left ear tone
soundRight = pygame.sndarray.make_sound(buf_right)                    #Initialize right ear tone

# 1st part - give examples of sounds generated by each source
def exampleTones(seq,toneStim,tc,sourceStim,soundLeft,soundRight,lpos=(-sx*.20,sy*.1),rpos = (sx*.20,sy*.1)):
    cross.draw()
    win.flip()
    core.wait(.5)
    cross.draw()
    sourceStim.draw()
    win.flip()
    core.wait(.5)
    toneStim.setColor(tc)
    for i in np.arange(len(seq)):
        cross.draw()
        sourceStim.draw()
        if seq[i] == True:
            toneStim.setPos(lpos)
            sound = soundLeft
        else:
            toneStim.setPos(rpos)
            sound = soundRight
        toneStim.draw()
        win.flip()
        sound.play()
        core.wait(1)
        
        # Make the tone stim disapear
        cross.draw()
        win.flip()
        core.wait(1)
        
 # 2nd part - give examples of sounds generated by each source
def exampleSwitchTones(sourceSeq,source1,source2,toneStim,soundLeft,soundRight,lpos=(-sx*.20,sy*.1),rpos = (sx*.20,sy*.1)):
    s1col = 'red'
    s2col = 'blue'
    for i in np.arange(len(sourceSeq)):
        if sourceSeq[i] == 'left':
            tone = np.random.uniform(0,1,1)<.8
            source = source1
            col = s1col
        else:
            tone = np.random.uniform(0,1,1)>.8
            source = source2
            col = s2col
        cross.draw()
        source.draw()
        win.flip()
        core.wait(.5)
        
        toneStim.setColor(col)
        cross.draw()
        source.draw()
        if tone == True:
            toneStim.setPos(lpos)
            sound = soundLeft
        else:
            toneStim.setPos(rpos)
            sound = soundRight
        toneStim.draw()
        win.flip()
        sound.play()
        core.wait(1)
        
        # Make the tone stim disapear
        cross.draw()
        win.flip()
        core.wait(1)

###########################
## PART 1 - SHOW SOURCES ##
###########################

# Generate examples - "True" values == left tone
p = .8
nex = 10
leftEx = np.random.uniform(0,1,nex) < p
rightEx = np.random.uniform(0,1,nex) > p

#Examples for the left source
int = visual.TextStim(win,text='Press any key to observe\nexamples from source 1')
int.draw()
win.flip()
event.waitKeys()
exampleTones(leftEx,tone,'red',lcircle,soundLeft,soundRight)

int = visual.TextStim(win,text='Press any key to observe\nexamples from source 2')
int.draw()
win.flip()
event.waitKeys()
exampleTones(rightEx,tone,'blue',rcircle,soundLeft,soundRight)

###################################
## PART 2 - SHOW SOURCE SWITCHES ##
###################################

int = visual.TextStim(win,text='Example of sources switching infrequently')
int.draw()
win.flip()
event.waitKeys()
sources = ['left']*10+['right']*10
exampleSwitchTones(sources,lcircle,rcircle,tone,soundLeft,soundRight)

int = visual.TextStim(win,text='Example of sources switching frequently')
int.draw()
win.flip()
event.waitKeys()
sources = ['left','right','left','right','right','left','right','left','right','left']
exampleSwitchTones(sources,lcircle,rcircle,tone,soundLeft,soundRight)

########################################
## PART 3 - PREDICTIONS WITH FEEDBACK ##
########################################

def predSourceFeedback(sources,toneStim,source1,source2,soundL,soundR,lpos=(-sx*.20,sy*.1),rpos = (sx*.20,sy*.1)):
    c1 = visual.Circle(win,radius=sy*.06,color='white',pos=(-sx*.20,0))
    c2 = visual.Circle(win,radius=sy*.06,color='white',pos=(sx*.20,0))
    
    redX = visual.ImageStim(win,image="redX.png",size=(sy*.05,sy*.05))
    greenCheck = visual.ImageStim(win,image="greenCheck.png",size=(sy*.05,sy*.05))
    
    
    firstInstr = visual.TextStim(win,text='Predict which source will generate the next tone',pos=(0,sy*.1))
    
    for i in np.arange(len(sources)):
        win.flip()
        core.wait(.5)
        firstInstr.draw()
        cross.draw()
        c1.draw()
        c2.draw()
        win.flip()
        key = event.waitKeys(keyList=['left','right'])
        cross.draw()
        if key[0] == 'left':
            choice = c1
            fbPos = lpos
        else:
            choice = c2
            fbPos = rpos
        cross.draw()
        choice.draw()
        win.flip()
        core.wait(.5)


        if sources[i] == 'left':
            source = source1
            toneCol = 'red'
            side = np.random.uniform(0,1,1)<.8
        else:
            source = source2
            toneCol = 'blue'
            side = np.random.uniform(0,1,1)>.8
        cross.draw()
        choice.draw()
        source.draw()
        if side == True:
            toneStim.setPos(lpos)
            tone = soundL
        else:
            toneStim.setPos(rpos)
            tone = soundR
        toneStim.setColor(toneCol)
        toneStim.draw()
        win.flip()
        tone.play()
        core.wait(1.5)
        
        choice.draw()
        source.draw()
        if key[0] == sources[i]:
            fb = greenCheck
        else:
            fb = redX
        fb.setPos(fbPos)
        
        

        cross.draw()
        choice.draw()
        source.draw()
        fb.draw()
        win.flip()
        
        core.wait(1)

sources = ['left']*5+['right']*5
predSourceFeedback(sources,tone,lcircle,rcircle,soundLeft,soundRight)

#######################################################
## PART 4 - PREDICTIONS WITH NO VISUALS BUT FEEDBACK ##
#######################################################

def predFeedback(sources,toneStim,soundL,soundR,lpos=(-sx*.20,sy*.1),rpos = (sx*.20,sy*.1)):
    c1 = visual.Circle(win,radius=sy*.06,color='white',pos=(-sx*.20,0))
    c2 = visual.Circle(win,radius=sy*.06,color='white',pos=(sx*.20,0))
    
    redX = visual.ImageStim(win,image="redX.png",size=(sy*.05,sy*.05))
    greenCheck = visual.ImageStim(win,image="greenCheck.png",size=(sy*.05,sy*.05))
    
    
    firstInstr = visual.TextStim(win,text='Predict which source will generate the next tone',pos=(0,sy*.1))
    
    for i in np.arange(len(sources)):
        win.flip()
        core.wait(.5)
        firstInstr.draw()
        cross.draw()
        c1.draw()
        c2.draw()
        win.flip()
        key = event.waitKeys(keyList=['left','right'])
        cross.draw()
        if key[0] == 'left':
            choice = c1
            fbPos = lpos
        else:
            choice = c2
            fbPos = rpos
        cross.draw()
        choice.draw()
        win.flip()
        core.wait(.5)


        if sources[i] == 'left':
            side = np.random.uniform(0,1,1)<.8
        else:
            side = np.random.uniform(0,1,1)>.8
        cross.draw()
        choice.draw()
        if side == True:
            toneStim.setPos(lpos)
            tone = soundL
        else:
            toneStim.setPos(rpos)
            tone = soundR
        toneStim.setColor('white')
        toneStim.draw()
        win.flip()
        tone.play()
        core.wait(1.5)
        
        choice.draw()
        if key[0] == sources[i]:
            fb = greenCheck
        else:
            fb = redX
        fb.setPos(fbPos)
        
        

        cross.draw()
        choice.draw()
        fb.draw()
        win.flip()
        
        core.wait(1)
        
firstInstr = visual.TextStim(win,text='Predictions with feedback only')
firstInstr.draw()
win.flip()

event.waitKeys()
predFeedback(sources,tone,soundLeft,soundRight)

endInstr = visual.TextStim(win,text='End of instructions')
endInstr.draw()
win.flip()
core.wait(1)
core.quit()